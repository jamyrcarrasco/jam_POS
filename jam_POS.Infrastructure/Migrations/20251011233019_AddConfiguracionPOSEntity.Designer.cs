// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using jam_POS.Infrastructure.Data;

#nullable disable

namespace jam_POS.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251011233019_AddConfiguracionPOSEntity")]
    partial class AddConfiguracionPOSEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("jam_POS.Core.Entities.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("integer");

                    b.Property<string>("Icono")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Activo");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("Nombre");

                    b.ToTable("Categorias");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            Color = "#3B82F6",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Descripcion = "Bebidas y refrescos",
                            Icono = "local_drink",
                            Nombre = "Bebidas",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            Activo = true,
                            Color = "#10B981",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Descripcion = "Alimentos y comestibles",
                            Icono = "restaurant",
                            Nombre = "Alimentos",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 3,
                            Activo = true,
                            Color = "#8B5CF6",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Descripcion = "Productos electrónicos y tecnología",
                            Icono = "devices",
                            Nombre = "Electrónica",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 4,
                            Activo = true,
                            Color = "#F59E0B",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Descripcion = "Productos de limpieza e higiene",
                            Icono = "cleaning_services",
                            Nombre = "Limpieza",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 5,
                            Activo = true,
                            Color = "#EC4899",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Descripcion = "Ropa y accesorios",
                            Icono = "checkroom",
                            Nombre = "Ropa",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("jam_POS.Core.Entities.ConfiguracionPOS", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("CreditoHabilitado")
                        .HasColumnType("boolean");

                    b.Property<int>("DecimalesMoneda")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(2);

                    b.Property<decimal>("DescuentoMaximoPorcentaje")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(100m);

                    b.Property<bool>("EfectivoHabilitado")
                        .HasColumnType("boolean");

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("integer");

                    b.Property<string>("FormatoPapel")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("TERMICO_58");

                    b.Property<bool>("ImprimirAutomaticamente")
                        .HasColumnType("boolean");

                    b.Property<bool>("ImprimirCopiaCliente")
                        .HasColumnType("boolean");

                    b.Property<int?>("ImpuestoPorDefectoId")
                        .HasColumnType("integer");

                    b.Property<bool>("IncluirLogoRecibo")
                        .HasColumnType("boolean");

                    b.Property<int>("IntervaloSincronizacionMinutos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(15);

                    b.Property<string>("MensajePieRecibo")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("ModoOfflineHabilitado")
                        .HasColumnType("boolean");

                    b.Property<string>("MonedaPorDefecto")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasDefaultValue("DOP");

                    b.Property<bool>("PermitirDescuentos")
                        .HasColumnType("boolean");

                    b.Property<bool>("PermitirDevoluciones")
                        .HasColumnType("boolean");

                    b.Property<string>("PrefijoFactura")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("PrefijoRecibo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("SiguienteNumeroFactura")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<int>("SiguienteNumeroRecibo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("SimboloMoneda")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasDefaultValue("$");

                    b.Property<bool>("TarjetaHabilitado")
                        .HasColumnType("boolean");

                    b.Property<int>("TiempoLimiteAnulacionMinutos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(30);

                    b.Property<bool>("TransferenciaHabilitado")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("ImpuestoPorDefectoId");

                    b.ToTable("ConfiguracionesPOS");
                });

            modelBuilder.Entity("jam_POS.Core.Entities.Empresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Ciudad")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CodigoPostal")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Direccion")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("FechaVencimientoPlan")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("NombreComercial")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Pais")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Plan")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("BASICO");

                    b.Property<string>("RNC")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Telefono")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Activo");

                    b.HasIndex("RNC");

                    b.ToTable("Empresas");
                });

            modelBuilder.Entity("jam_POS.Core.Entities.Impuesto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("AplicaPorDefecto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("MontoFijo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Porcentaje")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("PORCENTUAL");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Activo");

                    b.HasIndex("AplicaPorDefecto");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("Nombre");

                    b.ToTable("Impuestos");
                });

            modelBuilder.Entity("jam_POS.Core.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsSystem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Module")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Module");

                    b.HasIndex("Name");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Ver productos",
                            IsSystem = true,
                            Module = "PRODUCTOS",
                            Name = "productos.view"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Crear productos",
                            IsSystem = true,
                            Module = "PRODUCTOS",
                            Name = "productos.create"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Editar productos",
                            IsSystem = true,
                            Module = "PRODUCTOS",
                            Name = "productos.edit"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Eliminar productos",
                            IsSystem = true,
                            Module = "PRODUCTOS",
                            Name = "productos.delete"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Ver categorías",
                            IsSystem = true,
                            Module = "CATEGORIAS",
                            Name = "categorias.view"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Crear categorías",
                            IsSystem = true,
                            Module = "CATEGORIAS",
                            Name = "categorias.create"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Editar categorías",
                            IsSystem = true,
                            Module = "CATEGORIAS",
                            Name = "categorias.edit"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Eliminar categorías",
                            IsSystem = true,
                            Module = "CATEGORIAS",
                            Name = "categorias.delete"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Realizar ventas",
                            IsSystem = true,
                            Module = "VENTAS",
                            Name = "ventas.create"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Ver ventas",
                            IsSystem = true,
                            Module = "VENTAS",
                            Name = "ventas.view"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Cancelar ventas",
                            IsSystem = true,
                            Module = "VENTAS",
                            Name = "ventas.cancel"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Hacer devoluciones",
                            IsSystem = true,
                            Module = "VENTAS",
                            Name = "ventas.refund"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Ver clientes",
                            IsSystem = true,
                            Module = "CLIENTES",
                            Name = "clientes.view"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Crear clientes",
                            IsSystem = true,
                            Module = "CLIENTES",
                            Name = "clientes.create"
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Editar clientes",
                            IsSystem = true,
                            Module = "CLIENTES",
                            Name = "clientes.edit"
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Eliminar clientes",
                            IsSystem = true,
                            Module = "CLIENTES",
                            Name = "clientes.delete"
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Reportes de ventas",
                            IsSystem = true,
                            Module = "REPORTES",
                            Name = "reportes.ventas"
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Reportes de inventario",
                            IsSystem = true,
                            Module = "REPORTES",
                            Name = "reportes.inventario"
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Reportes de clientes",
                            IsSystem = true,
                            Module = "REPORTES",
                            Name = "reportes.clientes"
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Reportes financieros",
                            IsSystem = true,
                            Module = "REPORTES",
                            Name = "reportes.financiero"
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Ver usuarios",
                            IsSystem = true,
                            Module = "USUARIOS",
                            Name = "usuarios.view"
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Crear usuarios",
                            IsSystem = true,
                            Module = "USUARIOS",
                            Name = "usuarios.create"
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Editar usuarios",
                            IsSystem = true,
                            Module = "USUARIOS",
                            Name = "usuarios.edit"
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Eliminar usuarios",
                            IsSystem = true,
                            Module = "USUARIOS",
                            Name = "usuarios.delete"
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Cambiar rol de usuarios",
                            IsSystem = true,
                            Module = "USUARIOS",
                            Name = "usuarios.change_role"
                        },
                        new
                        {
                            Id = 26,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Configuración general",
                            IsSystem = true,
                            Module = "CONFIGURACIONES",
                            Name = "config.general"
                        },
                        new
                        {
                            Id = 27,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Configuración de empresa",
                            IsSystem = true,
                            Module = "CONFIGURACIONES",
                            Name = "config.empresa"
                        },
                        new
                        {
                            Id = 28,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Configuración de impuestos",
                            IsSystem = true,
                            Module = "CONFIGURACIONES",
                            Name = "config.impuestos"
                        },
                        new
                        {
                            Id = 29,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Configuración de punto de venta",
                            IsSystem = true,
                            Module = "CONFIGURACIONES",
                            Name = "config.pos"
                        },
                        new
                        {
                            Id = 30,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Gestión de roles y permisos",
                            IsSystem = true,
                            Module = "CONFIGURACIONES",
                            Name = "config.roles"
                        });
                });

            modelBuilder.Entity("jam_POS.Core.Entities.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int?>("CategoriaId")
                        .HasColumnType("integer");

                    b.Property<string>("CodigoBarras")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("integer");

                    b.Property<string>("ImagenUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<decimal?>("MargenGanancia")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PrecioCompra")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("integer");

                    b.Property<int?>("StockMinimo")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Activo");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("CodigoBarras");

                    b.HasIndex("EmpresaId");

                    b.ToTable("Productos");
                });

            modelBuilder.Entity("jam_POS.Core.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsSystem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Activo");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("Name");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Super Administrador con acceso total",
                            IsSystem = true,
                            Name = "SuperAdmin",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            Activo = true,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Vendedor con acceso limitado",
                            IsSystem = true,
                            Name = "Seller",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("jam_POS.Core.Entities.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("GrantedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId", "PermissionId")
                        .IsUnique();

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GrantedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PermissionId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            GrantedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PermissionId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 3,
                            GrantedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PermissionId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 4,
                            GrantedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PermissionId = 4,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 5,
                            GrantedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PermissionId = 5,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 6,
                            GrantedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PermissionId = 6,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 7,
                            GrantedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PermissionId = 7,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 8,
                            GrantedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PermissionId = 8,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 9,
                            GrantedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PermissionId = 9,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 10,
                            GrantedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PermissionId = 10,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 11,
                            GrantedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PermissionId = 11,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 12,
                            GrantedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PermissionId = 12,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 13,
                            GrantedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PermissionId = 13,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 14,
                            GrantedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PermissionId = 14,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 15,
                            GrantedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PermissionId = 15,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 16,
                            GrantedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PermissionId = 16,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 17,
                            GrantedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PermissionId = 17,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 18,
                            GrantedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PermissionId = 18,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 19,
                            GrantedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PermissionId = 19,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 20,
                            GrantedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PermissionId = 20,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 21,
                            GrantedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PermissionId = 21,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 22,
                            GrantedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PermissionId = 22,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 23,
                            GrantedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PermissionId = 23,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 24,
                            GrantedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PermissionId = 24,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 25,
                            GrantedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PermissionId = 25,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 26,
                            GrantedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PermissionId = 26,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 27,
                            GrantedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PermissionId = 27,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 28,
                            GrantedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PermissionId = 28,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 29,
                            GrantedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PermissionId = 29,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 30,
                            GrantedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PermissionId = 30,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 31,
                            GrantedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PermissionId = 1,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 32,
                            GrantedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PermissionId = 9,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 33,
                            GrantedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PermissionId = 10,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 34,
                            GrantedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PermissionId = 13,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 35,
                            GrantedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PermissionId = 14,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("jam_POS.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("EmpresaId");

                    b.HasIndex("RoleId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@jampos.com",
                            FirstName = "Super",
                            IsActive = true,
                            LastName = "Admin",
                            PasswordHash = "$2a$11$5fWtFVOh12gx86fQfcBOOet8VZYWvMYRv69Xd1L5tK.TZ1V66qer6",
                            RoleId = 1,
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "seller@jampos.com",
                            FirstName = "John",
                            IsActive = true,
                            LastName = "Seller",
                            PasswordHash = "$2a$11$31wUTXxAMstpUc/XTY07oeBOgMiWITR692wn.vcJ4wCa2PLsHALvq",
                            RoleId = 2,
                            Username = "seller"
                        });
                });

            modelBuilder.Entity("jam_POS.Core.Entities.Categoria", b =>
                {
                    b.HasOne("jam_POS.Core.Entities.Empresa", "Empresa")
                        .WithMany("Categorias")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("jam_POS.Core.Entities.ConfiguracionPOS", b =>
                {
                    b.HasOne("jam_POS.Core.Entities.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("jam_POS.Core.Entities.Impuesto", "ImpuestoPorDefecto")
                        .WithMany()
                        .HasForeignKey("ImpuestoPorDefectoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Empresa");

                    b.Navigation("ImpuestoPorDefecto");
                });

            modelBuilder.Entity("jam_POS.Core.Entities.Impuesto", b =>
                {
                    b.HasOne("jam_POS.Core.Entities.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("jam_POS.Core.Entities.Producto", b =>
                {
                    b.HasOne("jam_POS.Core.Entities.Categoria", "Categoria")
                        .WithMany("Productos")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("jam_POS.Core.Entities.Empresa", "Empresa")
                        .WithMany("Productos")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Categoria");

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("jam_POS.Core.Entities.Role", b =>
                {
                    b.HasOne("jam_POS.Core.Entities.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("jam_POS.Core.Entities.RolePermission", b =>
                {
                    b.HasOne("jam_POS.Core.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("jam_POS.Core.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("jam_POS.Core.Entities.User", b =>
                {
                    b.HasOne("jam_POS.Core.Entities.Empresa", "Empresa")
                        .WithMany("Users")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("jam_POS.Core.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Empresa");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("jam_POS.Core.Entities.Categoria", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("jam_POS.Core.Entities.Empresa", b =>
                {
                    b.Navigation("Categorias");

                    b.Navigation("Productos");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("jam_POS.Core.Entities.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("jam_POS.Core.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
